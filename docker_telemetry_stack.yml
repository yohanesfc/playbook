---
- name: Install Docker Telemetry Stack (Simple Version)
  hosts: telemetry_server
  become: yes
  gather_facts: yes
  
  tasks:
    # Install Docker
    - name: Update package cache
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install Docker
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
      when: ansible_os_family == "Debian"

    - name: Start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Create working directory
    - name: Create telemetry directory
      file:
        path: /opt/telemetry
        state: directory
        mode: '0755'

    # Create docker-compose file
    - name: Create docker-compose.yml
      copy:
        content: |
          version: '3.8'
          services:
            influxdb:
              image: influxdb:1.8
              container_name: influxdb
              restart: always
              ports:
                - "8086:8086"
              environment:
                INFLUXDB_DB: cisco_telemetry
                INFLUXDB_ADMIN_USER: admin
                INFLUXDB_ADMIN_PASSWORD: admin123
              volumes:
                - influxdb_data:/var/lib/influxdb

            telegraf:
              image: telegraf:latest
              container_name: telegraf
              restart: always
              ports:
                - "57344:57344"
              volumes:
                - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
              depends_on:
                - influxdb

            grafana:
              image: grafana/grafana:latest
              container_name: grafana
              restart: always
              ports:
                - "3000:3000"
              environment:
                GF_SECURITY_ADMIN_USER: admin
                GF_SECURITY_ADMIN_PASSWORD: admin123
              volumes:
                - grafana_data:/var/lib/grafana
              depends_on:
                - influxdb

          volumes:
            influxdb_data:
            grafana_data:
        dest: /opt/telemetry/docker-compose.yml

    # Create Telegraf config
    - name: Create Telegraf configuration
      copy:
        content: |
          [agent]
            interval = "10s"
            round_interval = true
            metric_batch_size = 1000
            metric_buffer_limit = 10000
            flush_interval = "10s"

          [[outputs.influxdb]]
            urls = ["http://influxdb:8086"]
            database = "cisco_telemetry"
            username = "admin"
            password = "admin123"

          # Cisco Model-Driven Telemetry
          [[inputs.cisco_telemetry_mdt]]
            transport = "tcp"
            service_address = ":57344"
            max_msg_size = 4000000

          # System monitoring
          [[inputs.cpu]]
          [[inputs.mem]]
          [[inputs.disk]]
          [[inputs.net]]
        dest: /opt/telemetry/telegraf.conf

    # Deploy containers
    - name: Stop existing containers (if any)
      shell: |
        cd /opt/telemetry
        docker-compose down || true
      ignore_errors: yes

    - name: Pull latest images
      shell: |
        cd /opt/telemetry
        docker-compose pull

    - name: Start telemetry stack
      shell: |
        cd /opt/telemetry
        docker-compose up -d
      register: compose_output

    - name: Display deployment output
      debug:
        msg: "{{ compose_output.stdout_lines }}"

    # Wait for services
    - name: Wait for InfluxDB to be ready
      wait_for:
        port: 8086
        host: "{{ ansible_default_ipv4.address }}"
        delay: 15
        timeout: 120

    - name: Wait for Grafana to be ready
      wait_for:
        port: 3000
        host: "{{ ansible_default_ipv4.address }}"
        delay: 20
        timeout: 120

    - name: Wait for Telegraf to be ready
      wait_for:
        port: 57344
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60

    # Verify deployment
    - name: Check running containers
      command: docker ps
      register: container_status

    - name: Display running containers
      debug:
        msg: "{{ container_status.stdout_lines }}"

    - name: Test InfluxDB connection
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:8086/ping"
        method: GET
      register: influxdb_test

    - name: Test Grafana connection
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:3000/api/health"
        method: GET
      register: grafana_test
      
    - name: Check telemetry port
      command: netstat -tlnp | grep 57344
      register: telemetry_port_check

    - name: Display final status
      debug:
        msg:
          - "=== TELEMETRY STACK DEPLOYMENT COMPLETE ==="
          - "âœ… InfluxDB: http://{{ ansible_default_ipv4.address }}:8086"
          - "âœ… Grafana: http://{{ ansible_default_ipv4.address }}:3000"
          - "   Username: admin"
          - "   Password: admin123"
          - "âœ… Telemetry Collector: {{ ansible_default_ipv4.address }}:57344"
          - ""
          - "InfluxDB Status: {{ 'OK' if influxdb_test.status == 204 else 'FAILED' }}"
          - "Grafana Status: {{ 'OK' if grafana_test.status == 200 else 'FAILED' }}"
          - "Telemetry Port: {{ 'LISTENING' if telemetry_port_check.stdout else 'NOT LISTENING' }}"
          - ""
          - "ðŸ”— Next: Configure Cisco device to send data to {{ ansible_default_ipv4.address }}:57344"